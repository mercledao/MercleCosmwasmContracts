{"$message_type":"diagnostic","message":"use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/contract.rs","byte_start":191,"byte_end":200,"line_start":5,"line_end":5,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"    coins, to_binary, BankMsg, Binary, Deps, DepsMut, Env, Event, MessageInfo, Response, StdResult,","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:5:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    coins, to_binary, BankMsg, Binary, Deps, DepsMut, Env, Event, MessageInfo, Response, StdResult,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/contract.rs","byte_start":825,"byte_end":834,"line_start":29,"line_end":29,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"        Greet {} => to_binary(&query::greet()?),","highlight_start":21,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:29:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Greet {} => to_binary(&query::greet()?),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/contract.rs","byte_start":879,"byte_end":888,"line_start":30,"line_end":30,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"        AdminsList {} => to_binary(&query::admins_list(deps)?),","highlight_start":26,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated function `cosmwasm_std::to_binary`: use to_json_binary instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:30:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        AdminsList {} => to_binary(&query::admins_list(deps)?),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":578,"byte_end":590,"line_start":19,"line_end":19,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"    ADMINS.save(deps.storage, &admins?)?;","highlight_start":17,"highlight_end":29}],"label":"expected trait `cosmwasm_std::traits::Storage`, found trait `Storage`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":573,"byte_end":577,"line_start":19,"line_end":19,"column_start":12,"column_end":16,"is_primary":false,"text":[{"text":"    ADMINS.save(deps.storage, &admins?)?;","highlight_start":12,"highlight_end":16}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut dyn cosmwasm_std::traits::Storage`\n   found mutable reference `&mut dyn Storage`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs","byte_start":1218,"byte_end":1222,"line_start":40,"line_end":40,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    pub fn save(&self, store: &mut dyn Storage, data: &T) -> StdResult<()> {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:19:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ADMINS.save(deps.storage, &admins?)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected trait `cosmwasm_std::traits::Storage`, found trait `Storage`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `&mut \u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn cosmwasm_std::traits::Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found mutable reference `&mut \u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs:40:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn save(&self, store: &mut dyn Storage, data: &T) -> StdResult<()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":573,"byte_end":601,"line_start":19,"line_end":19,"column_start":12,"column_end":40,"is_primary":false,"text":[{"text":"    ADMINS.save(deps.storage, &admins?)?;","highlight_start":12,"highlight_end":40}],"label":"this can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":392,"byte_end":411,"line_start":13,"line_end":13,"column_start":6,"column_end":25,"is_primary":false,"text":[{"text":") -> StdResult<Response> {","highlight_start":6,"highlight_end":25}],"label":"expected `cosmwasm_std::StdError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":601,"byte_end":602,"line_start":19,"line_end":19,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    ADMINS.save(deps.storage, &admins?)?;","highlight_start":40,"highlight_end":41}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`, which is required by `Result<cosmwasm_std::Response, cosmwasm_std::StdError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":601,"byte_end":602,"line_start":19,"line_end":19,"column_start":40,"column_end":41,"is_primary":false,"text":[{"text":"    ADMINS.save(deps.storage, &admins?)?;","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  <cosmwasm_std::StdError as From<CoinFromStrError>>\n  <cosmwasm_std::StdError as From<CoinsError>>\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\n  <cosmwasm_std::StdError as From<RecoverPubkeyError>>\n  <cosmwasm_std::StdError as From<Utf8Error>>\n  <cosmwasm_std::StdError as From<VerificationError>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<cosmwasm_std::Response, cosmwasm_std::StdError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:19:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> StdResult<Response> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `cosmwasm_std::StdError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ADMINS.save(deps.storage, &admins?)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`, which is required by `Result<cosmwasm_std::Response, cosmwasm_std::StdError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<CoinFromStrError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<CoinsError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<RecoverPubkeyError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<Utf8Error>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<VerificationError>>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<cosmwasm_std::Response, cosmwasm_std::StdError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":628,"byte_end":640,"line_start":20,"line_end":20,"column_start":25,"column_end":37,"is_primary":true,"text":[{"text":"    DONATION_DENOM.save(deps.storage, &msg.donation_denom)?;","highlight_start":25,"highlight_end":37}],"label":"expected trait `cosmwasm_std::traits::Storage`, found trait `Storage`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":623,"byte_end":627,"line_start":20,"line_end":20,"column_start":20,"column_end":24,"is_primary":false,"text":[{"text":"    DONATION_DENOM.save(deps.storage, &msg.donation_denom)?;","highlight_start":20,"highlight_end":24}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut dyn cosmwasm_std::traits::Storage`\n   found mutable reference `&mut dyn Storage`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs","byte_start":1218,"byte_end":1222,"line_start":40,"line_end":40,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    pub fn save(&self, store: &mut dyn Storage, data: &T) -> StdResult<()> {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:20:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DONATION_DENOM.save(deps.storage, &msg.donation_denom)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected trait `cosmwasm_std::traits::Storage`, found trait `Storage`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `&mut \u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn cosmwasm_std::traits::Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found mutable reference `&mut \u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs:40:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn save(&self, store: &mut dyn Storage, data: &T) -> StdResult<()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":623,"byte_end":662,"line_start":20,"line_end":20,"column_start":20,"column_end":59,"is_primary":false,"text":[{"text":"    DONATION_DENOM.save(deps.storage, &msg.donation_denom)?;","highlight_start":20,"highlight_end":59}],"label":"this can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":392,"byte_end":411,"line_start":13,"line_end":13,"column_start":6,"column_end":25,"is_primary":false,"text":[{"text":") -> StdResult<Response> {","highlight_start":6,"highlight_end":25}],"label":"expected `cosmwasm_std::StdError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":662,"byte_end":663,"line_start":20,"line_end":20,"column_start":59,"column_end":60,"is_primary":true,"text":[{"text":"    DONATION_DENOM.save(deps.storage, &msg.donation_denom)?;","highlight_start":59,"highlight_end":60}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`, which is required by `Result<cosmwasm_std::Response, cosmwasm_std::StdError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":662,"byte_end":663,"line_start":20,"line_end":20,"column_start":59,"column_end":60,"is_primary":false,"text":[{"text":"    DONATION_DENOM.save(deps.storage, &msg.donation_denom)?;","highlight_start":59,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  <cosmwasm_std::StdError as From<CoinFromStrError>>\n  <cosmwasm_std::StdError as From<CoinsError>>\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\n  <cosmwasm_std::StdError as From<RecoverPubkeyError>>\n  <cosmwasm_std::StdError as From<Utf8Error>>\n  <cosmwasm_std::StdError as From<VerificationError>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<cosmwasm_std::Response, cosmwasm_std::StdError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:20:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> StdResult<Response> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `cosmwasm_std::StdError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DONATION_DENOM.save(deps.storage, &msg.donation_denom)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`, which is required by `Result<cosmwasm_std::Response, cosmwasm_std::StdError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<CoinFromStrError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<CoinsError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<RecoverPubkeyError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<Utf8Error>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<VerificationError>>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<cosmwasm_std::Response, cosmwasm_std::StdError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":1511,"byte_end":1523,"line_start":57,"line_end":57,"column_start":43,"column_end":55,"is_primary":true,"text":[{"text":"        let mut curr_admins = ADMINS.load(deps.storage)?;","highlight_start":43,"highlight_end":55}],"label":"expected trait `cosmwasm_std::traits::Storage`, found trait `Storage`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":1506,"byte_end":1510,"line_start":57,"line_end":57,"column_start":38,"column_end":42,"is_primary":false,"text":[{"text":"        let mut curr_admins = ADMINS.load(deps.storage)?;","highlight_start":38,"highlight_end":42}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"     expected reference `&dyn cosmwasm_std::traits::Storage`\nfound mutable reference `&mut dyn Storage`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs","byte_start":1557,"byte_end":1561,"line_start":50,"line_end":50,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    pub fn load(&self, store: &dyn Storage) -> StdResult<T> {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:57:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut curr_admins = ADMINS.load(deps.storage)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected trait `cosmwasm_std::traits::Storage`, found trait `Storage`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:      expected reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn cosmwasm_std::traits::Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m           found mutable reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mmut dyn Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs:50:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn load(&self, store: &dyn Storage) -> StdResult<T> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `error::ContractError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":1506,"byte_end":1524,"line_start":57,"line_end":57,"column_start":38,"column_end":56,"is_primary":false,"text":[{"text":"        let mut curr_admins = ADMINS.load(deps.storage)?;","highlight_start":38,"highlight_end":56}],"label":"this can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":1435,"byte_end":1466,"line_start":56,"line_end":56,"column_start":10,"column_end":41,"is_primary":false,"text":[{"text":"    ) -> Result<Response, ContractError> {","highlight_start":10,"highlight_end":41}],"label":"expected `error::ContractError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":1524,"byte_end":1525,"line_start":57,"line_end":57,"column_start":56,"column_end":57,"is_primary":true,"text":[{"text":"        let mut curr_admins = ADMINS.load(deps.storage)?;","highlight_start":56,"highlight_end":57}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`, which is required by `Result<cosmwasm_std::Response, error::ContractError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":1524,"byte_end":1525,"line_start":57,"line_end":57,"column_start":56,"column_end":57,"is_primary":false,"text":[{"text":"        let mut curr_admins = ADMINS.load(deps.storage)?;","highlight_start":56,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  <error::ContractError as From<PaymentError>>\n  <error::ContractError as From<cosmwasm_std::StdError>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<cosmwasm_std::Response, error::ContractError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `error::ContractError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:57:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<Response, ContractError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `error::ContractError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut curr_admins = ADMINS.load(deps.storage)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`, which is required by `Result<cosmwasm_std::Response, error::ContractError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <error::ContractError as From<PaymentError>>\u001b[0m\n\u001b[0m             <error::ContractError as From<cosmwasm_std::StdError>>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<cosmwasm_std::Response, error::ContractError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2226,"byte_end":2238,"line_start":78,"line_end":78,"column_start":21,"column_end":33,"is_primary":true,"text":[{"text":"        ADMINS.save(deps.storage, &curr_admins)?;","highlight_start":21,"highlight_end":33}],"label":"expected trait `cosmwasm_std::traits::Storage`, found trait `Storage`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":2221,"byte_end":2225,"line_start":78,"line_end":78,"column_start":16,"column_end":20,"is_primary":false,"text":[{"text":"        ADMINS.save(deps.storage, &curr_admins)?;","highlight_start":16,"highlight_end":20}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut dyn cosmwasm_std::traits::Storage`\n   found mutable reference `&mut dyn Storage`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs","byte_start":1218,"byte_end":1222,"line_start":40,"line_end":40,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    pub fn save(&self, store: &mut dyn Storage, data: &T) -> StdResult<()> {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:78:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ADMINS.save(deps.storage, &curr_admins)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected trait `cosmwasm_std::traits::Storage`, found trait `Storage`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `&mut \u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn cosmwasm_std::traits::Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found mutable reference `&mut \u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs:40:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn save(&self, store: &mut dyn Storage, data: &T) -> StdResult<()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `error::ContractError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2221,"byte_end":2253,"line_start":78,"line_end":78,"column_start":16,"column_end":48,"is_primary":false,"text":[{"text":"        ADMINS.save(deps.storage, &curr_admins)?;","highlight_start":16,"highlight_end":48}],"label":"this can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":1435,"byte_end":1466,"line_start":56,"line_end":56,"column_start":10,"column_end":41,"is_primary":false,"text":[{"text":"    ) -> Result<Response, ContractError> {","highlight_start":10,"highlight_end":41}],"label":"expected `error::ContractError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":2253,"byte_end":2254,"line_start":78,"line_end":78,"column_start":48,"column_end":49,"is_primary":true,"text":[{"text":"        ADMINS.save(deps.storage, &curr_admins)?;","highlight_start":48,"highlight_end":49}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`, which is required by `Result<cosmwasm_std::Response, error::ContractError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":2253,"byte_end":2254,"line_start":78,"line_end":78,"column_start":48,"column_end":49,"is_primary":false,"text":[{"text":"        ADMINS.save(deps.storage, &curr_admins)?;","highlight_start":48,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  <error::ContractError as From<PaymentError>>\n  <error::ContractError as From<cosmwasm_std::StdError>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<cosmwasm_std::Response, error::ContractError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `error::ContractError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:78:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<Response, ContractError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `error::ContractError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ADMINS.save(deps.storage, &curr_admins)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`, which is required by `Result<cosmwasm_std::Response, error::ContractError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <error::ContractError as From<PaymentError>>\u001b[0m\n\u001b[0m             <error::ContractError as From<cosmwasm_std::StdError>>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<cosmwasm_std::Response, error::ContractError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `cosmwasm_std::StdError: From<cosmwasm_std::errors::std_error::StdError>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2372,"byte_end":2378,"line_start":84,"line_end":84,"column_start":16,"column_end":22,"is_primary":true,"text":[{"text":"        ADMINS.update(deps.storage, move |admins| -> StdResult<_> {","highlight_start":16,"highlight_end":22}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `From<T>`:\n  <cosmwasm_std::StdError as From<CoinFromStrError>>\n  <cosmwasm_std::StdError as From<CoinsError>>\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\n  <cosmwasm_std::StdError as From<RecoverPubkeyError>>\n  <cosmwasm_std::StdError as From<Utf8Error>>\n  <cosmwasm_std::StdError as From<VerificationError>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Item::<'a, T>::update`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs","byte_start":2317,"byte_end":2323,"line_start":67,"line_end":67,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"    pub fn update<A, E>(&self, store: &mut dyn Storage, action: A) -> Result<T, E>","highlight_start":12,"highlight_end":18}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs","byte_start":2448,"byte_end":2462,"line_start":70,"line_end":70,"column_start":12,"column_end":26,"is_primary":true,"text":[{"text":"        E: From<StdError>,","highlight_start":12,"highlight_end":26}],"label":"required by this bound in `Item::<'a, T>::update`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `cosmwasm_std::StdError: From<cosmwasm_std::errors::std_error::StdError>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:84:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ADMINS.update(deps.storage, move |admins| -> StdResult<_> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<CoinFromStrError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<CoinsError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<RecoverPubkeyError>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<Utf8Error>>\u001b[0m\n\u001b[0m             <cosmwasm_std::StdError as From<VerificationError>>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Item::<'a, T>::update`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs:70:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn update<A, E>(&self, store: &mut dyn Storage, action: A) -> Result<T, E>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        E: From<StdError>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Item::<'a, T>::update`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2379,"byte_end":2391,"line_start":84,"line_end":84,"column_start":23,"column_end":35,"is_primary":true,"text":[{"text":"        ADMINS.update(deps.storage, move |admins| -> StdResult<_> {","highlight_start":23,"highlight_end":35}],"label":"expected trait `cosmwasm_std::traits::Storage`, found trait `Storage`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":2372,"byte_end":2378,"line_start":84,"line_end":84,"column_start":16,"column_end":22,"is_primary":false,"text":[{"text":"        ADMINS.update(deps.storage, move |admins| -> StdResult<_> {","highlight_start":16,"highlight_end":22}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut dyn cosmwasm_std::traits::Storage`\n   found mutable reference `&mut dyn Storage`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs","byte_start":2317,"byte_end":2323,"line_start":67,"line_end":67,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn update<A, E>(&self, store: &mut dyn Storage, action: A) -> Result<T, E>","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:84:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ADMINS.update(deps.storage, move |admins| -> StdResult<_> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected trait `cosmwasm_std::traits::Storage`, found trait `Storage`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `&mut \u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn cosmwasm_std::traits::Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found mutable reference `&mut \u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs:67:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn update<A, E>(&self, store: &mut dyn Storage, action: A) -> Result<T, E>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2770,"byte_end":2782,"line_start":96,"line_end":96,"column_start":41,"column_end":53,"is_primary":true,"text":[{"text":"        let denom = DONATION_DENOM.load(deps.storage)?;","highlight_start":41,"highlight_end":53}],"label":"expected trait `cosmwasm_std::traits::Storage`, found trait `Storage`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":2765,"byte_end":2769,"line_start":96,"line_end":96,"column_start":36,"column_end":40,"is_primary":false,"text":[{"text":"        let denom = DONATION_DENOM.load(deps.storage)?;","highlight_start":36,"highlight_end":40}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"     expected reference `&dyn cosmwasm_std::traits::Storage`\nfound mutable reference `&mut dyn Storage`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs","byte_start":1557,"byte_end":1561,"line_start":50,"line_end":50,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    pub fn load(&self, store: &dyn Storage) -> StdResult<T> {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:96:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let denom = DONATION_DENOM.load(deps.storage)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected trait `cosmwasm_std::traits::Storage`, found trait `Storage`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:      expected reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn cosmwasm_std::traits::Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m           found mutable reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mmut dyn Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs:50:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn load(&self, store: &dyn Storage) -> StdResult<T> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `error::ContractError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2765,"byte_end":2783,"line_start":96,"line_end":96,"column_start":36,"column_end":54,"is_primary":false,"text":[{"text":"        let denom = DONATION_DENOM.load(deps.storage)?;","highlight_start":36,"highlight_end":54}],"label":"this can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":2696,"byte_end":2727,"line_start":95,"line_end":95,"column_start":56,"column_end":87,"is_primary":false,"text":[{"text":"    pub fn donate(deps: DepsMut, info: MessageInfo) -> Result<Response, ContractError> {","highlight_start":56,"highlight_end":87}],"label":"expected `error::ContractError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":2783,"byte_end":2784,"line_start":96,"line_end":96,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"        let denom = DONATION_DENOM.load(deps.storage)?;","highlight_start":54,"highlight_end":55}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`, which is required by `Result<cosmwasm_std::Response, error::ContractError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":2783,"byte_end":2784,"line_start":96,"line_end":96,"column_start":54,"column_end":55,"is_primary":false,"text":[{"text":"        let denom = DONATION_DENOM.load(deps.storage)?;","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  <error::ContractError as From<PaymentError>>\n  <error::ContractError as From<cosmwasm_std::StdError>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<cosmwasm_std::Response, error::ContractError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `error::ContractError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:96:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn donate(deps: DepsMut, info: MessageInfo) -> Result<Response, ContractError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `error::ContractError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let denom = DONATION_DENOM.load(deps.storage)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`, which is required by `Result<cosmwasm_std::Response, error::ContractError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <error::ContractError as From<PaymentError>>\u001b[0m\n\u001b[0m             <error::ContractError as From<cosmwasm_std::StdError>>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<cosmwasm_std::Response, error::ContractError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2819,"byte_end":2831,"line_start":97,"line_end":97,"column_start":34,"column_end":46,"is_primary":true,"text":[{"text":"        let admins = ADMINS.load(deps.storage)?;","highlight_start":34,"highlight_end":46}],"label":"expected trait `cosmwasm_std::traits::Storage`, found trait `Storage`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":2814,"byte_end":2818,"line_start":97,"line_end":97,"column_start":29,"column_end":33,"is_primary":false,"text":[{"text":"        let admins = ADMINS.load(deps.storage)?;","highlight_start":29,"highlight_end":33}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"     expected reference `&dyn cosmwasm_std::traits::Storage`\nfound mutable reference `&mut dyn Storage`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs","byte_start":1557,"byte_end":1561,"line_start":50,"line_end":50,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    pub fn load(&self, store: &dyn Storage) -> StdResult<T> {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:97:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let admins = ADMINS.load(deps.storage)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected trait `cosmwasm_std::traits::Storage`, found trait `Storage`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:      expected reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn cosmwasm_std::traits::Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m           found mutable reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mmut dyn Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs:50:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn load(&self, store: &dyn Storage) -> StdResult<T> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `error::ContractError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2814,"byte_end":2832,"line_start":97,"line_end":97,"column_start":29,"column_end":47,"is_primary":false,"text":[{"text":"        let admins = ADMINS.load(deps.storage)?;","highlight_start":29,"highlight_end":47}],"label":"this can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":2696,"byte_end":2727,"line_start":95,"line_end":95,"column_start":56,"column_end":87,"is_primary":false,"text":[{"text":"    pub fn donate(deps: DepsMut, info: MessageInfo) -> Result<Response, ContractError> {","highlight_start":56,"highlight_end":87}],"label":"expected `error::ContractError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":2832,"byte_end":2833,"line_start":97,"line_end":97,"column_start":47,"column_end":48,"is_primary":true,"text":[{"text":"        let admins = ADMINS.load(deps.storage)?;","highlight_start":47,"highlight_end":48}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`, which is required by `Result<cosmwasm_std::Response, error::ContractError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":2832,"byte_end":2833,"line_start":97,"line_end":97,"column_start":47,"column_end":48,"is_primary":false,"text":[{"text":"        let admins = ADMINS.load(deps.storage)?;","highlight_start":47,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  <error::ContractError as From<PaymentError>>\n  <error::ContractError as From<cosmwasm_std::StdError>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<cosmwasm_std::Response, error::ContractError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `error::ContractError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:97:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn donate(deps: DepsMut, info: MessageInfo) -> Result<Response, ContractError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `error::ContractError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let denom = DONATION_DENOM.load(deps.storage)?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let admins = ADMINS.load(deps.storage)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `error::ContractError`, which is required by `Result<cosmwasm_std::Response, error::ContractError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             <error::ContractError as From<PaymentError>>\u001b[0m\n\u001b[0m             <error::ContractError as From<cosmwasm_std::StdError>>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<cosmwasm_std::Response, error::ContractError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":2878,"byte_end":2883,"line_start":99,"line_end":99,"column_start":43,"column_end":48,"is_primary":true,"text":[{"text":"        let donation = cw_utils::must_pay(&info, &denom)?.u128();","highlight_start":43,"highlight_end":48}],"label":"expected `cosmwasm_std::types::MessageInfo`, found `cosmwasm_std::MessageInfo`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":2859,"byte_end":2877,"line_start":99,"line_end":99,"column_start":24,"column_end":42,"is_primary":false,"text":[{"text":"        let donation = cw_utils::must_pay(&info, &denom)?.u128();","highlight_start":24,"highlight_end":42}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`cosmwasm_std::MessageInfo` and `cosmwasm_std::types::MessageInfo` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`cosmwasm_std::MessageInfo` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/types.rs","byte_start":3723,"byte_end":3745,"line_start":91,"line_end":91,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"pub struct MessageInfo {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::types::MessageInfo` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/types.rs","byte_start":3732,"byte_end":3754,"line_start":91,"line_end":91,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"pub struct MessageInfo {","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-utils-0.15.1/src/payment.rs","byte_start":980,"byte_end":988,"line_start":32,"line_end":32,"column_start":8,"column_end":16,"is_primary":true,"text":[{"text":"pub fn must_pay(info: &MessageInfo, denom: &str) -> Result<Uint128, PaymentError> {","highlight_start":8,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:99:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let donation = cw_utils::must_pay(&info, &denom)?.u128();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `cosmwasm_std::types::MessageInfo`, found `cosmwasm_std::MessageInfo`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `cosmwasm_std::MessageInfo` and `cosmwasm_std::types::MessageInfo` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::MessageInfo` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/types.rs:91:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct MessageInfo {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::types::MessageInfo` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/types.rs:91:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct MessageInfo {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-utils-0.15.1/src/payment.rs:32:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn must_pay(info: &MessageInfo, denom: &str) -> Result<Uint128, PaymentError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":3719,"byte_end":3731,"line_start":130,"line_end":130,"column_start":34,"column_end":46,"is_primary":true,"text":[{"text":"        let admins = ADMINS.load(deps.storage)?;","highlight_start":34,"highlight_end":46}],"label":"expected trait `cosmwasm_std::traits::Storage`, found trait `Storage`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":3714,"byte_end":3718,"line_start":130,"line_end":130,"column_start":29,"column_end":33,"is_primary":false,"text":[{"text":"        let admins = ADMINS.load(deps.storage)?;","highlight_start":29,"highlight_end":33}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&dyn cosmwasm_std::traits::Storage`\n   found reference `&dyn Storage`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs","byte_start":1557,"byte_end":1561,"line_start":50,"line_end":50,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    pub fn load(&self, store: &dyn Storage) -> StdResult<T> {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:130:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let admins = ADMINS.load(deps.storage)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected trait `cosmwasm_std::traits::Storage`, found trait `Storage`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn cosmwasm_std::traits::Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mdyn Storage\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-storage-plus-0.15.1/src/item.rs:50:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn load(&self, store: &dyn Storage) -> StdResult<T> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `cosmwasm_std::StdError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":3714,"byte_end":3732,"line_start":130,"line_end":130,"column_start":29,"column_end":47,"is_primary":false,"text":[{"text":"        let admins = ADMINS.load(deps.storage)?;","highlight_start":29,"highlight_end":47}],"label":"this can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":3658,"byte_end":3683,"line_start":129,"line_end":129,"column_start":39,"column_end":64,"is_primary":false,"text":[{"text":"    pub fn admins_list(deps: Deps) -> StdResult<AdminsListResp> {","highlight_start":39,"highlight_end":64}],"label":"expected `cosmwasm_std::StdError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":3732,"byte_end":3733,"line_start":130,"line_end":130,"column_start":47,"column_end":48,"is_primary":true,"text":[{"text":"        let admins = ADMINS.load(deps.storage)?;","highlight_start":47,"highlight_end":48}],"label":"the trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`, which is required by `Result<msg::AdminsListResp, cosmwasm_std::StdError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/contract.rs","byte_start":3732,"byte_end":3733,"line_start":130,"line_end":130,"column_start":47,"column_end":48,"is_primary":false,"text":[{"text":"        let admins = ADMINS.load(deps.storage)?;","highlight_start":47,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  <cosmwasm_std::StdError as From<CoinFromStrError>>\n  <cosmwasm_std::StdError as From<CoinsError>>\n  <cosmwasm_std::StdError as From<ConversionOverflowError>>\n  <cosmwasm_std::StdError as From<DivideByZeroError>>\n  <cosmwasm_std::StdError as From<FromUtf8Error>>\n  <cosmwasm_std::StdError as From<OverflowError>>\n  <cosmwasm_std::StdError as From<RecoverPubkeyError>>\n  <cosmwasm_std::StdError as From<Utf8Error>>\n  <cosmwasm_std::StdError as From<VerificationError>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<msg::AdminsListResp, cosmwasm_std::StdError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `cosmwasm_std::StdError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:130:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn admins_list(deps: Deps) -> StdResult<AdminsListResp> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `cosmwasm_std::StdError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let admins = ADMINS.load(deps.storage)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<cosmwasm_std::errors::std_error::StdError>` is not implemented for `cosmwasm_std::StdError`, which is required by `Result<msg::AdminsListResp, cosmwasm_std::StdError>: FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, cosmwasm_std::errors::std_error::StdError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<CoinFromStrError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<CoinsError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<ConversionOverflowError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<DivideByZeroError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<FromUtf8Error>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<OverflowError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<RecoverPubkeyError>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<Utf8Error>>\u001b[0m\n\u001b[0m              <cosmwasm_std::StdError as From<VerificationError>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<msg::AdminsListResp, cosmwasm_std::StdError>` to implement `FromResidual<Result<Infallible, cosmwasm_std::errors::std_error::StdError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":4069,"byte_end":4089,"line_start":149,"line_end":149,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":4090,"byte_end":4097,"line_start":149,"line_end":149,"column_start":41,"column_end":48,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":41,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::DepsMut<'a, _>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, _) -> Result<cosmwasm_std::results::response::Response<_>, _>`\n      found fn item `for<'a> fn(cosmwasm_std::DepsMut<'a>, Env, cosmwasm_std::MessageInfo, msg::ExecuteMsg) -> Result<cosmwasm_std::Response, error::ContractError> {contract::execute}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":4099,"byte_end":4110,"line_start":149,"line_end":149,"column_start":50,"column_end":61,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":50,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::DepsMut<'a, _>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, _) -> Result<cosmwasm_std::results::response::Response<_>, _>`\n      found fn item `for<'a> fn(cosmwasm_std::DepsMut<'a>, Env, cosmwasm_std::MessageInfo, msg::InstantiateMsg) -> Result<cosmwasm_std::Response, cosmwasm_std::StdError> {contract::instantiate}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":4112,"byte_end":4117,"line_start":149,"line_end":149,"column_start":63,"column_end":68,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":63,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::Deps<'a, _>, cosmwasm_std::types::Env, _) -> Result<cosmwasm_std::binary::Binary, _>`\n      found fn item `for<'a> fn(cosmwasm_std::Deps<'a>, Env, msg::QueryMsg) -> Result<cosmwasm_std::Binary, cosmwasm_std::StdError> {contract::query}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/contracts.rs","byte_start":3672,"byte_end":3675,"line_start":107,"line_end":107,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: arguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:149:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:149:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::DepsMut<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::MessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mresults::response::Response<_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDepsMut<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::ExecuteMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mResponse\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35merror::ContractError\u001b[0m\u001b[0m> {contract::execute}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:149:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::DepsMut<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::MessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mresults::response::Response<_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDepsMut<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::InstantiateMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mResponse\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::StdError\u001b[0m\u001b[0m> {contract::instantiate}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:149:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::Deps<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mbinary::Binary\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDeps<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::QueryMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mBinary\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::StdError\u001b[0m\u001b[0m> {contract::query}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/contracts.rs:107:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":4274,"byte_end":4298,"line_start":155,"line_end":155,"column_start":17,"column_end":41,"is_primary":true,"text":[{"text":"                Addr::unchecked(\"owner\"),","highlight_start":17,"highlight_end":41}],"label":"expected `cosmwasm_std::addresses::Addr`, found `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":4211,"byte_end":4231,"line_start":153,"line_end":153,"column_start":14,"column_end":34,"is_primary":false,"text":[{"text":"            .instantiate_contract(","highlight_start":14,"highlight_end":34}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs","byte_start":1290,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs","byte_start":1165,"byte_end":1180,"line_start":28,"line_end":28,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs","byte_start":2370,"byte_end":2390,"line_start":74,"line_end":74,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn instantiate_contract<T: Serialize, U: Into<String>>(","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:155:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .instantiate_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                code_id,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Addr::unchecked(\"owner\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `cosmwasm_std::addresses::Addr`, found `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs:32:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs:74:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn instantiate_contract<T: Serialize, U: Into<String>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":4858,"byte_end":4882,"line_start":176,"line_end":176,"column_start":17,"column_end":41,"is_primary":true,"text":[{"text":"                Addr::unchecked(\"owner\"),","highlight_start":17,"highlight_end":41}],"label":"expected `cosmwasm_std::addresses::Addr`, found `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":4795,"byte_end":4815,"line_start":174,"line_end":174,"column_start":14,"column_end":34,"is_primary":false,"text":[{"text":"            .instantiate_contract(","highlight_start":14,"highlight_end":34}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs","byte_start":1290,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs","byte_start":1165,"byte_end":1180,"line_start":28,"line_end":28,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs","byte_start":2370,"byte_end":2390,"line_start":74,"line_end":74,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn instantiate_contract<T: Serialize, U: Into<String>>(","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:176:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .instantiate_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                code_id,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Addr::unchecked(\"owner\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `cosmwasm_std::addresses::Addr`, found `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs:32:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs:74:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn instantiate_contract<T: Serialize, U: Into<String>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":5599,"byte_end":5619,"line_start":204,"line_end":204,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":5620,"byte_end":5627,"line_start":204,"line_end":204,"column_start":41,"column_end":48,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":41,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::DepsMut<'a, _>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, _) -> Result<cosmwasm_std::results::response::Response<_>, _>`\n      found fn item `for<'a> fn(cosmwasm_std::DepsMut<'a>, Env, cosmwasm_std::MessageInfo, msg::ExecuteMsg) -> Result<cosmwasm_std::Response, error::ContractError> {contract::execute}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":5629,"byte_end":5640,"line_start":204,"line_end":204,"column_start":50,"column_end":61,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":50,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::DepsMut<'a, _>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, _) -> Result<cosmwasm_std::results::response::Response<_>, _>`\n      found fn item `for<'a> fn(cosmwasm_std::DepsMut<'a>, Env, cosmwasm_std::MessageInfo, msg::InstantiateMsg) -> Result<cosmwasm_std::Response, cosmwasm_std::StdError> {contract::instantiate}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":5642,"byte_end":5647,"line_start":204,"line_end":204,"column_start":63,"column_end":68,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":63,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::Deps<'a, _>, cosmwasm_std::types::Env, _) -> Result<cosmwasm_std::binary::Binary, _>`\n      found fn item `for<'a> fn(cosmwasm_std::Deps<'a>, Env, msg::QueryMsg) -> Result<cosmwasm_std::Binary, cosmwasm_std::StdError> {contract::query}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/contracts.rs","byte_start":3672,"byte_end":3675,"line_start":107,"line_end":107,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: arguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:204:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:204:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::DepsMut<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::MessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mresults::response::Response<_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDepsMut<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::ExecuteMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mResponse\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35merror::ContractError\u001b[0m\u001b[0m> {contract::execute}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:204:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::DepsMut<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::MessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mresults::response::Response<_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDepsMut<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::InstantiateMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mResponse\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::StdError\u001b[0m\u001b[0m> {contract::instantiate}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:204:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::Deps<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mbinary::Binary\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDeps<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::QueryMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mBinary\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::StdError\u001b[0m\u001b[0m> {contract::query}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/contracts.rs:107:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":5804,"byte_end":5828,"line_start":210,"line_end":210,"column_start":17,"column_end":41,"is_primary":true,"text":[{"text":"                Addr::unchecked(\"owner\"),","highlight_start":17,"highlight_end":41}],"label":"expected `cosmwasm_std::addresses::Addr`, found `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":5741,"byte_end":5761,"line_start":208,"line_end":208,"column_start":14,"column_end":34,"is_primary":false,"text":[{"text":"            .instantiate_contract(","highlight_start":14,"highlight_end":34}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs","byte_start":1290,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs","byte_start":1165,"byte_end":1180,"line_start":28,"line_end":28,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs","byte_start":2370,"byte_end":2390,"line_start":74,"line_end":74,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn instantiate_contract<T: Serialize, U: Into<String>>(","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:210:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .instantiate_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                code_id,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Addr::unchecked(\"owner\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `cosmwasm_std::addresses::Addr`, found `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs:32:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs:74:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn instantiate_contract<T: Serialize, U: Into<String>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":6455,"byte_end":6475,"line_start":238,"line_end":238,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":6476,"byte_end":6483,"line_start":238,"line_end":238,"column_start":41,"column_end":48,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":41,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::DepsMut<'a, _>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, _) -> Result<cosmwasm_std::results::response::Response<_>, _>`\n      found fn item `for<'a> fn(cosmwasm_std::DepsMut<'a>, Env, cosmwasm_std::MessageInfo, msg::ExecuteMsg) -> Result<cosmwasm_std::Response, error::ContractError> {contract::execute}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":6485,"byte_end":6496,"line_start":238,"line_end":238,"column_start":50,"column_end":61,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":50,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::DepsMut<'a, _>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, _) -> Result<cosmwasm_std::results::response::Response<_>, _>`\n      found fn item `for<'a> fn(cosmwasm_std::DepsMut<'a>, Env, cosmwasm_std::MessageInfo, msg::InstantiateMsg) -> Result<cosmwasm_std::Response, cosmwasm_std::StdError> {contract::instantiate}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":6498,"byte_end":6503,"line_start":238,"line_end":238,"column_start":63,"column_end":68,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":63,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::Deps<'a, _>, cosmwasm_std::types::Env, _) -> Result<cosmwasm_std::binary::Binary, _>`\n      found fn item `for<'a> fn(cosmwasm_std::Deps<'a>, Env, msg::QueryMsg) -> Result<cosmwasm_std::Binary, cosmwasm_std::StdError> {contract::query}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/contracts.rs","byte_start":3672,"byte_end":3675,"line_start":107,"line_end":107,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: arguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:238:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:238:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::DepsMut<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::MessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mresults::response::Response<_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDepsMut<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::ExecuteMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mResponse\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35merror::ContractError\u001b[0m\u001b[0m> {contract::execute}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:238:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::DepsMut<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::MessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mresults::response::Response<_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDepsMut<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::InstantiateMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mResponse\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::StdError\u001b[0m\u001b[0m> {contract::instantiate}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:238:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::Deps<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mbinary::Binary\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDeps<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::QueryMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mBinary\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::StdError\u001b[0m\u001b[0m> {contract::query}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/contracts.rs:107:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":6660,"byte_end":6684,"line_start":244,"line_end":244,"column_start":17,"column_end":41,"is_primary":true,"text":[{"text":"                Addr::unchecked(\"owner\"),","highlight_start":17,"highlight_end":41}],"label":"expected `cosmwasm_std::addresses::Addr`, found `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":6597,"byte_end":6617,"line_start":242,"line_end":242,"column_start":14,"column_end":34,"is_primary":false,"text":[{"text":"            .instantiate_contract(","highlight_start":14,"highlight_end":34}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs","byte_start":1290,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs","byte_start":1165,"byte_end":1180,"line_start":28,"line_end":28,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs","byte_start":2370,"byte_end":2390,"line_start":74,"line_end":74,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn instantiate_contract<T: Serialize, U: Into<String>>(","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:244:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .instantiate_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                code_id,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Addr::unchecked(\"owner\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `cosmwasm_std::addresses::Addr`, found `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs:32:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs:74:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn instantiate_contract<T: Serialize, U: Into<String>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":7007,"byte_end":7030,"line_start":257,"line_end":257,"column_start":17,"column_end":40,"is_primary":true,"text":[{"text":"                Addr::unchecked(\"user\"),","highlight_start":17,"highlight_end":40}],"label":"expected `cosmwasm_std::addresses::Addr`, found `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":6973,"byte_end":6989,"line_start":256,"line_end":256,"column_start":14,"column_end":30,"is_primary":false,"text":[{"text":"            .execute_contract(","highlight_start":14,"highlight_end":30}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs","byte_start":1290,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs","byte_start":1165,"byte_end":1180,"line_start":28,"line_end":28,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs","byte_start":3312,"byte_end":3328,"line_start":100,"line_end":100,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"    fn execute_contract<T: Serialize + std::fmt::Debug>(","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:257:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .execute_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Addr::unchecked(\"user\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `cosmwasm_std::addresses::Addr`, found `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs:32:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs:100:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn execute_contract<T: Serialize + std::fmt::Debug>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":7503,"byte_end":7523,"line_start":278,"line_end":278,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":7524,"byte_end":7531,"line_start":278,"line_end":278,"column_start":41,"column_end":48,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":41,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::DepsMut<'a, _>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, _) -> Result<cosmwasm_std::results::response::Response<_>, _>`\n      found fn item `for<'a> fn(cosmwasm_std::DepsMut<'a>, Env, cosmwasm_std::MessageInfo, msg::ExecuteMsg) -> Result<cosmwasm_std::Response, error::ContractError> {contract::execute}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":7533,"byte_end":7544,"line_start":278,"line_end":278,"column_start":50,"column_end":61,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":50,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::DepsMut<'a, _>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, _) -> Result<cosmwasm_std::results::response::Response<_>, _>`\n      found fn item `for<'a> fn(cosmwasm_std::DepsMut<'a>, Env, cosmwasm_std::MessageInfo, msg::InstantiateMsg) -> Result<cosmwasm_std::Response, cosmwasm_std::StdError> {contract::instantiate}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":7546,"byte_end":7551,"line_start":278,"line_end":278,"column_start":63,"column_end":68,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":63,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::Deps<'a, _>, cosmwasm_std::types::Env, _) -> Result<cosmwasm_std::binary::Binary, _>`\n      found fn item `for<'a> fn(cosmwasm_std::Deps<'a>, Env, msg::QueryMsg) -> Result<cosmwasm_std::Binary, cosmwasm_std::StdError> {contract::query}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/contracts.rs","byte_start":3672,"byte_end":3675,"line_start":107,"line_end":107,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: arguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:278:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:278:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::DepsMut<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::MessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mresults::response::Response<_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDepsMut<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::ExecuteMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mResponse\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35merror::ContractError\u001b[0m\u001b[0m> {contract::execute}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:278:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::DepsMut<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::MessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mresults::response::Response<_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDepsMut<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::InstantiateMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mResponse\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::StdError\u001b[0m\u001b[0m> {contract::instantiate}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:278:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::Deps<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mbinary::Binary\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDeps<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::QueryMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mBinary\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::StdError\u001b[0m\u001b[0m> {contract::query}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/contracts.rs:107:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":7708,"byte_end":7732,"line_start":284,"line_end":284,"column_start":17,"column_end":41,"is_primary":true,"text":[{"text":"                Addr::unchecked(\"owner\"),","highlight_start":17,"highlight_end":41}],"label":"expected `cosmwasm_std::addresses::Addr`, found `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":7645,"byte_end":7665,"line_start":282,"line_end":282,"column_start":14,"column_end":34,"is_primary":false,"text":[{"text":"            .instantiate_contract(","highlight_start":14,"highlight_end":34}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs","byte_start":1290,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs","byte_start":1165,"byte_end":1180,"line_start":28,"line_end":28,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs","byte_start":2370,"byte_end":2390,"line_start":74,"line_end":74,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn instantiate_contract<T: Serialize, U: Into<String>>(","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:284:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .instantiate_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                code_id,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Addr::unchecked(\"owner\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `cosmwasm_std::addresses::Addr`, found `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs:32:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs:74:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn instantiate_contract<T: Serialize, U: Into<String>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":8074,"byte_end":8098,"line_start":297,"line_end":297,"column_start":17,"column_end":41,"is_primary":true,"text":[{"text":"                Addr::unchecked(\"owner\"),","highlight_start":17,"highlight_end":41}],"label":"expected `cosmwasm_std::addresses::Addr`, found `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":8040,"byte_end":8056,"line_start":296,"line_end":296,"column_start":14,"column_end":30,"is_primary":false,"text":[{"text":"            .execute_contract(","highlight_start":14,"highlight_end":30}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs","byte_start":1290,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs","byte_start":1165,"byte_end":1180,"line_start":28,"line_end":28,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs","byte_start":3312,"byte_end":3328,"line_start":100,"line_end":100,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"    fn execute_contract<T: Serialize + std::fmt::Debug>(","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:297:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .execute_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Addr::unchecked(\"owner\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `cosmwasm_std::addresses::Addr`, found `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs:32:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs:100:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn execute_contract<T: Serialize + std::fmt::Debug>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this method are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":9388,"byte_end":9412,"line_start":347,"line_end":347,"column_start":40,"column_end":64,"is_primary":false,"text":[{"text":"                .init_balance(storage, &Addr::unchecked(\"user\"), coins(5, \"eth\"))","highlight_start":40,"highlight_end":64}],"label":"expected `cosmwasm_std::addresses::Addr`, found `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":9366,"byte_end":9378,"line_start":347,"line_end":347,"column_start":18,"column_end":30,"is_primary":true,"text":[{"text":"                .init_balance(storage, &Addr::unchecked(\"user\"), coins(5, \"eth\"))","highlight_start":18,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs","byte_start":1290,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs","byte_start":1165,"byte_end":1180,"line_start":28,"line_end":28,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected `cosmwasm_std::coins::Coin`, found `Coin`","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":9414,"byte_end":9429,"line_start":347,"line_end":347,"column_start":66,"column_end":81,"is_primary":true,"text":[{"text":"                .init_balance(storage, &Addr::unchecked(\"user\"), coins(5, \"eth\"))","highlight_start":66,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`Coin` and `cosmwasm_std::coins::Coin` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Coin` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/coin.rs","byte_start":245,"byte_end":260,"line_start":10,"line_end":10,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Coin {","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::coins::Coin` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/coins.rs","byte_start":189,"byte_end":204,"line_start":8,"line_end":8,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Coin {","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/bank.rs","byte_start":1021,"byte_end":1033,"line_start":41,"line_end":41,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn init_balance(","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: arguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:347:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .init_balance(storage, &Addr::unchecked(\"user\"), coins(5, \"eth\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `cosmwasm_std::addresses::Addr`, found `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs:32:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected `cosmwasm_std::coins::Coin`, found `Coin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:347:66\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .init_balance(storage, &Addr::unchecked(\"user\"), coins(5, \"eth\"))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Coin` and `cosmwasm_std::coins::Coin` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Coin` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/coin.rs:10:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Coin {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::coins::Coin` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/coins.rs:8:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Coin {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/bank.rs:41:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn init_balance(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this function are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":9489,"byte_end":9509,"line_start":351,"line_end":351,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":9510,"byte_end":9517,"line_start":351,"line_end":351,"column_start":41,"column_end":48,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":41,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::DepsMut<'a, _>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, _) -> Result<cosmwasm_std::results::response::Response<_>, _>`\n      found fn item `for<'a> fn(cosmwasm_std::DepsMut<'a>, Env, cosmwasm_std::MessageInfo, msg::ExecuteMsg) -> Result<cosmwasm_std::Response, error::ContractError> {contract::execute}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":9519,"byte_end":9530,"line_start":351,"line_end":351,"column_start":50,"column_end":61,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":50,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::DepsMut<'a, _>, cosmwasm_std::types::Env, cosmwasm_std::types::MessageInfo, _) -> Result<cosmwasm_std::results::response::Response<_>, _>`\n      found fn item `for<'a> fn(cosmwasm_std::DepsMut<'a>, Env, cosmwasm_std::MessageInfo, msg::InstantiateMsg) -> Result<cosmwasm_std::Response, cosmwasm_std::StdError> {contract::instantiate}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected fn pointer, found fn item","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":9532,"byte_end":9537,"line_start":351,"line_end":351,"column_start":63,"column_end":68,"is_primary":true,"text":[{"text":"        let code = ContractWrapper::new(execute, instantiate, query);","highlight_start":63,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `for<'a> fn(cosmwasm_std::deps::Deps<'a, _>, cosmwasm_std::types::Env, _) -> Result<cosmwasm_std::binary::Binary, _>`\n      found fn item `for<'a> fn(cosmwasm_std::Deps<'a>, Env, msg::QueryMsg) -> Result<cosmwasm_std::Binary, cosmwasm_std::StdError> {contract::query}`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/contracts.rs","byte_start":3672,"byte_end":3675,"line_start":107,"line_end":107,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new(","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: arguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:351:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:351:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::DepsMut<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::MessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mresults::response::Response<_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDepsMut<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::ExecuteMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mResponse\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35merror::ContractError\u001b[0m\u001b[0m> {contract::execute}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:351:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::DepsMut<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::MessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mresults::response::Response<_>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDepsMut<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mMessageInfo\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::InstantiateMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mResponse\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::StdError\u001b[0m\u001b[0m> {contract::instantiate}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected fn pointer, found fn item\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:351:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let code = ContractWrapper::new(execute, instantiate, query);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mdeps::Deps<'a, _>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::types::Env\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mbinary::Binary\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m                  found fn item `for<'a> fn(cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mDeps<'a>\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mmsg::QueryMsg\u001b[0m\u001b[0m) -> Result<cosmwasm_std::\u001b[0m\u001b[0m\u001b[1m\u001b[35mBinary\u001b[0m\u001b[0m, \u001b[0m\u001b[0m\u001b[1m\u001b[35mcosmwasm_std::StdError\u001b[0m\u001b[0m> {contract::query}`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/contracts.rs:107:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":9694,"byte_end":9718,"line_start":357,"line_end":357,"column_start":17,"column_end":41,"is_primary":true,"text":[{"text":"                Addr::unchecked(\"owner\"),","highlight_start":17,"highlight_end":41}],"label":"expected `cosmwasm_std::addresses::Addr`, found `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":9631,"byte_end":9651,"line_start":355,"line_end":355,"column_start":14,"column_end":34,"is_primary":false,"text":[{"text":"            .instantiate_contract(","highlight_start":14,"highlight_end":34}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs","byte_start":1290,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs","byte_start":1165,"byte_end":1180,"line_start":28,"line_end":28,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs","byte_start":2370,"byte_end":2390,"line_start":74,"line_end":74,"column_start":8,"column_end":28,"is_primary":true,"text":[{"text":"    fn instantiate_contract<T: Serialize, U: Into<String>>(","highlight_start":8,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:357:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .instantiate_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                code_id,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m357\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Addr::unchecked(\"owner\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `cosmwasm_std::addresses::Addr`, found `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs:32:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs:74:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn instantiate_contract<T: Serialize, U: Into<String>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"arguments to this method are incorrect","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":10054,"byte_end":10077,"line_start":369,"line_end":369,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"            Addr::unchecked(\"user\"),","highlight_start":13,"highlight_end":36}],"label":"expected `cosmwasm_std::addresses::Addr`, found `Addr`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":10024,"byte_end":10040,"line_start":368,"line_end":368,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"        app.execute_contract(","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs","byte_start":1290,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs","byte_start":1165,"byte_end":1180,"line_start":28,"line_end":28,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"pub struct Addr(String);","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `cosmwasm_std` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"expected `&[Coin]`, found `&Vec<Coin>`","code":null,"level":"note","spans":[{"file_name":"src/contract.rs","byte_start":10153,"byte_end":10169,"line_start":372,"line_end":372,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"            &coins(5, \"eth\"),","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected reference `&[cosmwasm_std::coins::Coin]`\n   found reference `&std::vec::Vec<Coin>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs","byte_start":3312,"byte_end":3328,"line_start":100,"line_end":100,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"    fn execute_contract<T: Serialize + std::fmt::Debug>(","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: arguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:368:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m368\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        app.execute_contract(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Addr::unchecked(\"user\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `cosmwasm_std::addresses::Addr`, found `Addr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `Addr` and `cosmwasm_std::addresses::Addr` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-2.1.0/src/addresses.rs:32:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `cosmwasm_std::addresses::Addr` is defined in crate `cosmwasm_std`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cosmwasm-std-1.1.4/src/addresses.rs:28:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Addr(String);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `cosmwasm_std` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: expected `&[Coin]`, found `&Vec<Coin>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:372:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m372\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            &coins(5, \"eth\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35m[cosmwasm_std::coins::Coin]\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::vec::Vec<Coin>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/divyesh87/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cw-multi-test-0.15.1/src/executor.rs:100:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn execute_contract<T: Serialize + std::fmt::Debug>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 32 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 32 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
